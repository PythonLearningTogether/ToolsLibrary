'''
Usage: 
Sometime, when backfill old data, we need to split the dates into small ranges to avoid of too much data to handle.
print split_dates("2015-01-01", "2016-12-31", 20)
[('2015-01-01', '2015-01-25'), ('2015-01-26', '2015-02-19'), ('2015-02-20', '2015-03-16'),
('2015-03-17', '2015-04-10'), ('2015-04-11', '2015-05-05'), ('2015-05-06', '2015-05-30'),
('2015-05-31', '2015-06-24'), ('2015-06-25', '2015-07-19'), ('2015-07-20', '2015-08-13'),
('2015-08-14', '2015-09-07'), ('2015-09-08', '2015-10-02'), ('2015-10-03', '2015-10-27'),
('2015-10-28', '2015-11-21'), ('2015-11-22', '2015-12-16'), ('2015-12-17', '2016-01-10'),
('2016-01-11', '2016-02-04'), ('2016-02-05', '2016-02-29'), ('2016-03-01', '2016-03-25'),
('2016-03-26', '2016-04-19'), ('2016-04-20', '2016-05-14'), ('2016-05-15', '2016-06-08'),
('2016-06-09', '2016-07-03'), ('2016-07-04', '2016-07-28'), ('2016-07-29', '2016-08-22'),
('2016-08-23', '2016-09-16'), ('2016-09-17', '2016-10-11'), ('2016-10-12', '2016-11-05'),
('2016-11-06', '2016-11-30'), ('2016-12-01', '2016-12-25'), ('2016-12-26', '2016-12-31')]
'''

def split_dates(start_date, end_date, piece_length, date_format="%Y-%m-%d"):
    import datetime
    assert isinstance(piece_length, int)
    assert piece_length >= 1

    if isinstance(start_date, str):
        start_date = datetime.datetime.strptime(start_date, date_format).date()
    if isinstance(end_date, str):
        end_date = datetime.datetime.strptime(end_date, date_format).date()

    if not (isinstance(start_date, datetime.date) and isinstance(end_date, datetime.date)):
        raise ValueError("Parameters Error")
    assert end_date > start_date
    nums = (end_date - start_date).days
    step = piece_length
    pieces_of_dates = [(start_date + datetime.timedelta(days=x), start_date + datetime.timedelta(days=x + step - 1 if x + step - 1 < nums else nums)) for x in range(0, nums + 1, step)]
    pieces_of_dates_str =[(e[0].strftime("%Y-%m-%d"), e[1].strftime("%Y-%m-%d")) for e in pieces_of_dates]
    return pieces_of_dates_str
